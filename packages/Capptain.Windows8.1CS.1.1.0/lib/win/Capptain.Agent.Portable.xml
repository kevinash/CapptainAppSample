<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Capptain.Agent.Portable</name>
    </assembly>
    <members>
        <member name="T:Capptain.Agent.CapptainPortableAgent">
            <summary>
            You do not have to use this Capptain Agent module directly. You have to use the CapptainAgent class instead.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainPortableAgent.sInstance">
            <summary>
            Unique instance of the Capptain agent.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainPortableAgent.mService">
            <summary>
            Service.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainPortableAgent.mCommandWorker">
            <summary>
            Thread safe command spool.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.PortableInit(System.Threading.Tasks.Task)">
            <summary>
            Portable init part of the Capptain Agent module.
            You should call this method right after the agent platform specific initialisation.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.Terminate">
            <summary>
            Manually terminate the Capptain Agent.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.StartActivity(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Notify the start of a new activity within the current session. A session being a sequence of
            activities, this call sets the current activity within the current session. If there is no
            current session, this call starts a new session.
            </summary>
            <param name="name">
            The name of the current activity for the current session, can be null for
            default name (but cannot be empty). Name is limited to 64 characters.
            </param>
            <param name="extras">
            The extra details associated with the activity. Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
            <see cref="M:Capptain.Agent.CapptainPortableAgent.EndActivity"/>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.EndActivity">
            <summary>
            Report that the current activity ended. This will close the session.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.StartJob(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Notify the start of a new job.
            </summary>
            <param name="name">
            Unique job name, two jobs with the same name can't run at the same time, if a job
            is started twice, the second version of the job will replace the first one.
            Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this job (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
            <see cref="M:Capptain.Agent.CapptainPortableAgent.EndJob(System.String)"/>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.EndJob(System.String)">
            <summary>
            Notify the end of a job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="name">The name of a job that has been started with "StartJob(string, Dictionnary)"</param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendEvent(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event unrelated to any session or job.
            </summary>
            <param name="name">
            Name event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, th e encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendSessionEvent(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event related to the current session. This has no effect if the session has not been started.
            </summary>
            <param name="name">
            Event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendJobEvent(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event related to a running job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="eventName">
            Event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="jobName">job name</param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendError(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error unrelated to any session or job.
            </summary>
            <param name="name">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this error (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendSessionError(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error related to the current session. This has no effect if the session has not been started.
            </summary>
            <param name="name">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this error (can be null) Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendJobError(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error related to a running job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="errorName">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="jobName">Job name.</param>
            <param name="extras">
            The extra details associated with this error (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendAppInfo(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send application specific informations.
            </summary>
            <param name="appInfos">
            Application information as a Dictionary. Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendCrash(System.Exception,System.String,System.Boolean)">
            <summary>
            Send a crash.
            </summary>
            <param name="e">The exception</param>
            <param name="stackTrace">The stack Trace</param>
            <param name="terminateSession">
            Determine if the Capptain session will be terminated or not. 
            True if you to terminate the session with crash, false otherwise.
            Default to false.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendLocation(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the location of the user.
            Each argument is optional.
            
            Private currently.
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <param name="countrycode">User's country code (iso 3166)</param>
            <param name="region">User's region</param>
            <param name="locality">User's locality</param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SendReachFeedback(System.String,System.String,System.Int32,System.String)">
            <summary>
            Send a reach feedback to the logger.
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Feedback of the body</param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.GetDeviceId">
            <summary>
            Get the device identifier.
            </summary>
            <returns>Id</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.SetBurstThreshold(System.Int32)">
            <summary>
            Set the delay between each request to the capptain back-end.
            By default, the value is 0, which means that the requests are sent in real-time.
            If you provide a value greather than 0, the logs will be bundled and send at
            the given value interval.
            The value must be higher than 1000ms in order to be effective. Otherwise, the
            burst threshold will be reset to real-time (0).
            
            If you want to reset the burst threshold, simply pass 0 to the method.
            </summary>
            <param name="threshold">Interval</param>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.#ctor(Capptain.Agent.AgentFactory)">
            <summary>
            protected constructor to prevent instanciation outside child.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.ReStartCommandWorker">
            <summary>
            Start the command worker.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.StopLogWorker">
            <summary>
            Stop the HTTP log worker, it is still possible to stack logs but they won't be sent.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainPortableAgent.StartLogWorker">
            <summary>
            Start the HTTP log worker, pending logs will be sent.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainPortableAgent.Instance">
            <summary>
            Get or Set the Capptain Configuration instance, setting up this instance must only be done on CapptainPortableAgent.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainConfiguration">
            <summary>
            This class gathers every Capptain settings required by Capptain SDK. 
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.CAPPTAIN_RESOURCES">
            <summary>
            The capptain resource filename.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.sInstance">
            <summary>
            The unique instance of Capptain configuration.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.mAgentConfiguration">
            <summary>
            The Capptain agent configuration.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.mReachConfiguration">
            <summary>
            The Capptain agent configuration.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainConfiguration.#ctor">
            <summary>
            Default CapptainConfiguration constructor.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.Agent">
            <summary>
            Customize Agent settings.
            </summary>
            <value>
            The Capptain's SDK key.
            </value>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.Reach">
            <summary>
            Customize Agent settings.
            </summary>
            <value>
            The Capptain's SDK key.
            </value>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.Instance">
            <summary>
            Get or Set the Capptain Configuration instance, setting up this instance must only be done on CapptainPortableAgent.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainConfiguration.AgentConfiguration">
            <summary>
            This class gathers agent settings required by Capptain agnent SDK. 
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.AgentConfiguration.mApplicationId">
            <summary>
            The application identifier.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainConfiguration.AgentConfiguration.mSDKkey">
            <summary>
            The sdk key.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainConfiguration.AgentConfiguration.#ctor">
            <summary>
            Agent configuration instanciation must not be used outside Capptain configuration class.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.AgentConfiguration.ApplicationId">
            <summary>
            Gets or sets the Capptain's application ID for this application.
            </summary>
            <value>
            The Capptain's application identifier.
            </value>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.AgentConfiguration.SDKKey">
            <summary>
            Gets or sets the Capptain's SDK key for this application.
            </summary>
            <value>
            The Capptain's SDK key.
            </value>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.AgentConfiguration.ReportCrash">
            <summary>
            True if capptain must report the location, false otherwise. Default to false
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.AgentConfiguration.ReportLocation">
            <summary>
            True if capptain must report the crashes automatically, false otherwise. Default to true
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainConfiguration.ReachConfiguration">
            <summary>
            This class gathers agent settings required by Capptain agnent SDK. 
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainConfiguration.ReachConfiguration.#ctor">
            <summary>
            Reach configuration instanciation must not be used outside Capptain configuration class.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.ReachConfiguration.EnableNativePush">
            <summary>
            Optional configuration. Indicate whether the native push (MPNS) is activated or not.
            </summary>
            <value>
              <c>true</c> if native push is enable otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Capptain.Agent.CapptainConfiguration.ReachConfiguration.ChannelName">
            <summary>
            Optional configuration. Name of the push channel. Provide the same that your application may currently use.
            </summary>
            <value>
            The name of the channel.
            </value>
        </member>
        <member name="T:Capptain.Agent.CapptainService">
            <summary>
            Capptain service.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.REGEX_KEY_FORMAT">
            <summary>
            Extras and appInfos keys must enforce a certain format.
            Use this regex format to test this.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.TYPE_EVENT">
            <summary>
            Event log name
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.TYPE_ERROR">
            <summary>
            Error log name
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mDeviceStatus">
            <summary>
            Device status.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mNetworkStatus">
            <summary>
            Network status.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mLocationService">
            <summary>
            Location service.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mHttpLogService">
            <summary>
            Http service.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mCommandWorker">
            <summary>
            Worker to execute agent command.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mAppLifecycle">
            <summary>
            Application life cycle manager
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mLogBuilder">
            <summary>
            Log builder facility.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mCurrentJobs">
            <summary>
            List of running jobs.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainService.mPendingLocationIpLog">
            <summary>
            When the sdk is initialized, it contacts the /ip-to-country API.
            However, we receiving the result of the API, we do not 
            the new
            location log instantly. We wait for a log that needs it.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.#ctor(Capptain.Agent.CommandWorker)">
            <summary>
            Create a capptain service.
            </summary>
            <param name="commandWorker">The worker which executes agent commands.</param>
            <exception cref="T:Capptain.Agent.CapptainIncorrectConfigurationException">Impossible to retrieve the device id. Check your app permission.</exception>
        </member>
        <member name="M:Capptain.Agent.CapptainService.StartActivity(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Start an activity.
            If there is no existing session, start a new one before the activity.
            Do nothing if the activity has already been started.
            </summary>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.EndActivity">
            <summary>
            End the activity and the session, except if a new activity is started during a 1s interval.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.EndSession">
            <summary>
            Reset all the flags.
            Create a endSession log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Agent.CapptainService.StartJob(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Start a job. Store it until it is stopped.
            </summary>
            <param name="name"></param>
            <param name="extras"></param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.SendReachFeedback(System.String,System.String,System.String,System.String)">
            <summary>
            Send a reach feedback to the logger.
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Body of the reach message</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.Windows81CrashFormater(System.String,System.String)">
            <summary>
            Windows 8.1 specific format for crash log
            </summary>
            <param name="stackTrace">Original stacktrace</param>
            <param name="data">Data to send to capptain</param>
            <returns>Formated data</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainService.GetInitialMethodInException(System.Exception)">
            <summary>
            Get the method that causes the exception.
            
            Eg.:
            
            System.NullReferenceException: You have reached the border of the galaxy
              at MetroPuppet.Views.PuppetView2.Button_Tap_1(Object sender, GestureEventArgs e)
              at MS.Internal.CoreInvokeHandler.InvokeEventHandler(Int32 typeIndex, Delegate handlerDelegate, Object sender, Object args)
              at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)
              
            Returns :
            
            $ -> "MetroPuppet.Views.PuppetView2.Button_Tap_1(Object sender, GestureEventArgs e)"
            </summary>
            <param name="e">Exception</param>
            <returns>Initial method</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainService.Windows81CrashIDFormater(System.Exception,System.String,System.String)">
            <summary>
            Windows 8.1 specific format for crash log ID
            </summary>
            <param name="e">Original execption</param>
            <param name="end">Substring attribut for format</param>
            <param name="method">Original method formated</param>
            <returns></returns>
        </member>
        <member name="M:Capptain.Agent.CapptainService.SendLocation(System.Xml.Linq.XElement)">
            <summary>
            Send a location.
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.SendLocation(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method is currently not exposed to the end-user (through the capptain agent).
            Send the given location to Capptain.
            Each argument is optional (use named parameter to select the ones you need).
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <param name="countrycode">Country code</param>
            <param name="region">Region</param>
            <param name="locality">Locality</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.InitLocationIp">
            <summary>
            Retrieve the current location from the IP.
            Asynchronous method.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.InitLocationTracking">
            <summary>
            Init the location tracking.
            Asynchronous method.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.UpdateLocation">
            <summary>
            Update and send the location.
            Asynchrounous method.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.Terminate(Capptain.Agent.CapptainLog)">
            <summary>
            Stop the service.
            Send the last logs (endSession, endJob, an eventual crash).
            </summary>
            <param name="crash">
            An eventual crash that started the termination. Could be null.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.CheckName(System.String,System.String,System.Boolean)">
            <summary>
            Check if a name is valid.
            Test if it is not null.
            Then, if the length is not 0 (after having been trimmed).
            Then, if the length does not exceed the fixed MAX_NAME_SIZE constant.
            </summary>
            <param name="name">Name to test.</param>
            <param name="caller">Caller method.</param>
            <param name="required">If the name is required (the validation is not strict).</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.CheckExtras(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Check if the keys of a dictionary (in string form) are valids.
            Throw an ArgumentException if a key is not valid.
            </summary>
            <param name="data">Data to inspect</param>
            <param name="caller">Caller method.</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.CheckDictionariesStrictEquality(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Compare two dictionaries for strict equality.
            </summary>
            <param name="a">The first dictionary</param>
            <param name="b">The second dictionary</param>
            <returns>True if strictly equal. False otherwise.</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainService.StopLogWorker">
            <summary>
            Stop the HTTP log worker, it is still possible to stack logs but they won't be sent.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.StartLogWorker">
            <summary>
            Start the HTTP log worker, pending logs will be sent.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.OnSuspended">
            <summary>
            On suspended.
            Terminate the service.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.OnVisibilityHide">
            <summary>
            Action to perform when the application just went background.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.OnVisibilityShow">
            <summary>
            Action to perform when the application just went foreground.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainService.OnCrashed(System.Exception)">
            <summary>
            On crashed handler.
            Send the crash and close the session.
            </summary>
            <param name="crash">Exception</param>
        </member>
        <member name="M:Capptain.Agent.CapptainService.OnLocIdRead(System.Object,Capptain.Agent.EventArgs{System.String})">
            <summary>
            When the application is started, we call the /ip-to-country API
            to get the current location country code.
            However, we do not send the log directly, but when we need it.
            This is why we listen to the LocIdRead event from the logBuilder to
            know when the loc id is accessed.
            
            When it's the case, we check if the locationIp log exists, and if the locId
            is not already set, we send it.
            Anyways, we reset the pending location IP log whatever it has been send or not.
            </summary>
            <param name="sender">Sender object</param>
            <param name="args">EventArgs containing the loc id</param>
        </member>
        <member name="T:Capptain.Agent.IApplicationLifecycleManager">
            <summary>
            Application life cycle management, ie:
            - Device status (to recover after a suspending state)
            - Device handlers (crash, closed, suspended)
            </summary>
        </member>
        <member name="M:Capptain.Agent.IApplicationLifecycleManager.SetOnSuspendEventHandler(System.Action)">
            <summary>
            Set the suspended handler.
            </summary>
            <param name="onSuspended">
            Callback when the app has been suspended.
            </param>
        </member>
        <member name="M:Capptain.Agent.IApplicationLifecycleManager.SetOnVisibilityEventHandler(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set the visibility hide handler to improve data manipulation and send onVisibilityShow action
            </summary>
            <param name="onVisibilityHide">Action use to match user manipulation</param>
            <param name="onVisibilityShow">Action use to match user manipulation</param>
            <param name="onSuspended">Action that end capptain process</param>
            <param name="onResumed">action for resuming</param>
        </member>
        <member name="M:Capptain.Agent.IApplicationLifecycleManager.SetOnCrashedHandler(System.Action{System.Exception})">
            <summary>
            Set the crashed handler.
            </summary>
            <param name="onCrashed">
            Callback when the app has been crashed.
            Takes one parameter : the crash string format.
            </param>
        </member>
        <member name="M:Capptain.Agent.IApplicationLifecycleManager.StoreInDeviceState">
            <summary>
            Store the capptain configuration in the device RAM to recover after a suspended state.
            </summary>
        </member>
        <member name="M:Capptain.Agent.IApplicationLifecycleManager.SetOnResumedHandler(System.Action)">
            <summary>
            Set the on resumed handler
            </summary>
            <param name="onResumed"></param>
        </member>
        <member name="P:Capptain.Agent.IApplicationLifecycleManager.SessionState">
            <summary>
            Get or set the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="P:Capptain.Agent.IApplicationLifecycleManager.ActivityStarted">
            <summary>
            Get or set a value indicating whether an activity is started or not.
            </summary>
            <value>
              <c>true</c> if an activity is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Capptain.Agent.IApplicationLifecycleManager.CurrentActivityName">
            <summary>
            Get or set the name of the current activity.
            </summary>
            <value>
            The name of the current activity.
            </value>
        </member>
        <member name="P:Capptain.Agent.IApplicationLifecycleManager.CurrentActivityExtras">
            <summary>
            Get or set the current activity extras.
            </summary>
            <value>
            The current activity extras.
            </value>
        </member>
        <member name="P:Capptain.Agent.IApplicationLifecycleManager.IsTerminating">
            <summary>
            Get or set a value indicating whether the App is terminating or not.
            </summary>
            <value>
              <c>true</c> if the session is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Capptain.Agent.IApplicationLifecycleManager.ActivityIsStarted">
            <summary>
            Triggered each time an Activity starts.
            </summary>
        </member>
        <member name="E:Capptain.Agent.IApplicationLifecycleManager.SessionIsIdled">
            <summary>
            This event occurs when the current session went just idled.
            </summary>
        </member>
        <member name="E:Capptain.Agent.IApplicationLifecycleManager.SessionIsEnded">
            <summary>
            This event occurs when the current session has just finished.
            </summary>
        </member>
        <member name="F:Capptain.Agent.AbstractApplicationLifecycleManager.mSessionState">
            <summary>
            Indicate the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="F:Capptain.Agent.AbstractApplicationLifecycleManager.mActivityStarted">
            <summary>
            Indicate if an activity has been started.
            </summary>
        </member>
        <member name="F:Capptain.Agent.AbstractApplicationLifecycleManager.mCurrentActivityName">
            <summary>
            Name of the current activity.
            </summary>
        </member>
        <member name="F:Capptain.Agent.AbstractApplicationLifecycleManager.mCurrentActivityExtras">
            <summary>
            Extras of the current activity.
            </summary>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Agent.AbstractApplicationLifecycleManager"/> class with default values.
            </summary>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.SetOnSuspendEventHandler(System.Action)">
            <summary>
            Set the suspended handler.
            </summary>
            <param name="onSuspended">Callback when the app has been suspended.</param>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.SetOnVisibilityEventHandler(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set the visibility hide handler to improve data manipulation and send onVisibilityShow action
            </summary>
            <param name="onVisibilityHide">Action use to match user manipulation</param>
            <param name="onVisibilityShow">Action that end capptain process</param>
            <param name="onSuspended">Action use to match user manipulation</param>
            <param name="onResumed">action for resuming</param>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.SetOnCrashedHandler(System.Action{System.Exception})">
            <summary>
            Set the crashed handler.
            </summary>
            <param name="onCrashed">Callback when the app has been crashed.
            Takes one parameter : the crash string format.</param>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.StoreInDeviceState">
            <summary>
            Store the capptain configuration in the device RAM to recover after a suspended state. 
            </summary>
        </member>
        <member name="M:Capptain.Agent.AbstractApplicationLifecycleManager.SetOnResumedHandler(System.Action)">
            <summary>
            Set the on resumed handler
            </summary>
            <param name="onResumed"></param>
        </member>
        <member name="P:Capptain.Agent.AbstractApplicationLifecycleManager.SessionState">
            <summary>
            Get or set the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="P:Capptain.Agent.AbstractApplicationLifecycleManager.ActivityStarted">
            <summary>
            Gets or sets a value indicating whether an activity is started or not.
            </summary>
            <value>
              <c>true</c> if an activity is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Capptain.Agent.AbstractApplicationLifecycleManager.CurrentActivityName">
            <summary>
            Gets or sets the name of the current activity.
            </summary>
            <value>
            The name of the current activity.
            </value>
        </member>
        <member name="P:Capptain.Agent.AbstractApplicationLifecycleManager.CurrentActivityExtras">
            <summary>
            Gets or sets the current activity extras.
            </summary>
            <value>
            The current activity extras.
            </value>
        </member>
        <member name="P:Capptain.Agent.AbstractApplicationLifecycleManager.IsTerminating">
            <summary>
            Gets or sets a value indicating whether the App is terminating or not.
            </summary>
            <value>
              <c>true</c> if the session is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Capptain.Agent.AbstractApplicationLifecycleManager.ActivityIsStarted">
            <summary>
            This event occurs when an activity has just started.
            </summary>
        </member>
        <member name="E:Capptain.Agent.AbstractApplicationLifecycleManager.SessionIsIdled">
            <summary>
            This event occurs when the current session went just idled.
            </summary>
        </member>
        <member name="E:Capptain.Agent.AbstractApplicationLifecycleManager.SessionIsEnded">
            <summary>
            This event occurs when the current session has just finished.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainLocationIpResult">
            <summary>
            DTO for the /ip-to-country result.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLocationIpResult.CountryCode">
            <summary>
            Country code.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLocationIpResult.IP">
            <summary>
            IP of the device
            </summary>
        </member>
        <member name="T:Capptain.Agent.IHMACSHA1">
            <summary>
            HMACSHA1 abstraction.
            </summary>
        </member>
        <member name="M:Capptain.Agent.IHMACSHA1.Hash(System.String,System.String)">
            <summary>
            Create a HMACSHA1 hash of the value, in lower case.
            </summary>
            <param name="key">HMAC key</param>
            <param name="data">HMAC data</param>
            <returns>Hash (lower case)</returns>
        </member>
        <member name="T:Capptain.Agent.AbstractStorage`1">
            <summary>
            Storage base abstraction.
            Provide a common implementation for platform-dependent mechanismes.
            
            A subclass will only have to override the Inner* methods and handle the actual
            way to Save/Load/Delete a file.
            </summary>
            <typeparam name="T">A Capptain data</typeparam>
        </member>
        <member name="T:Capptain.Agent.IStorage`1">
            <summary>
            Capptain storage abstraction.
            </summary>
            <typeparam name="T">A Capptain data</typeparam>
        </member>
        <member name="M:Capptain.Agent.IStorage`1.Save(System.Collections.Generic.List{`0})">
            <summary>
            Save permanently a list of objects to the storage.
            Save WILL erase the old data.
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Capptain.Agent.IStorage`1.Load">
            <summary>
            Load a list of objects from the storage.
            </summary>
            <returns>Data</returns>
        </member>
        <member name="M:Capptain.Agent.IStorage`1.Delete">
            <summary>
            Delete the storage.
            </summary>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.#ctor(System.String)">
            <summary>
            Initialize the storage.
            </summary>
            <param name="path">Storage location</param>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.Serialize(System.IO.Stream,System.Collections.Generic.List{`0})">
            <summary>
            Serialize a list of objects to a stream.
            </summary>
            <param name="stream">Stream</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a list of objets from a stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Data</returns>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.InnerSave(System.Collections.Generic.List{`0})">
            <summary>
            Abstract save mechanism (platform dependent).
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.InnerLoad">
            <summary>
            Abstract load mechanism (platform dependent).
            </summary>
            <returns>Data</returns>
        </member>
        <member name="M:Capptain.Agent.AbstractStorage`1.InnerDelete">
            <summary>
            Abstract delete mechanism (platform dependent).
            </summary>
        </member>
        <member name="P:Capptain.Agent.AbstractStorage`1.Path">
            <summary>
            Storage location.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainData">
            <summary>
            Empty class to decorate an object that contains a data used by Capptain.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainLog">
            <summary>
            Capptain log.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLog.mName">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLog.mExtras">
            <summary>
            Log extras.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLog.mBody">
            <summary>
            Log string body.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLog.mCreationTime">
            <summary>
            Log creation time.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLog.mAttributes">
            <summary>
            Log attributes.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.#ctor(System.String)">
            <summary>
            Create a new capptain log object
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetAttribute(System.String,System.String)">
            <summary>
            Add an attribute to the Capptain log.
            
            The key and value must not be null or composed of whitespaces.
            If an attribe has already been set, its value will be erased.
            
            The key and value are <b>trimmed</b>.
            </summary>
            <param name="key">Name of the attribute</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetExtras(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Int32)">
            <summary>
            Set the extras with a list of extras if the extras aren't null.
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            
            The extras are validated. Reasons to be invalid :
            - content greater than MAX_CONTENT_SIZE characters.
            
            Throw an CapptainInvalidLogException if invalid.
            </summary>
            <param name="extras">List of extras</param>
            <param name="limit">Limit (required)</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetExtras(System.Xml.Linq.XElement)">
            <summary>
            Set the extras with an XElement if not null.
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            
            No validation.
            Internal only.
            </summary>
            <param name="extras">Extras</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.RemoveExtras">
            <summary>
            Remove all the extras.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetBody(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Int32)">
            <summary>
            Set the body if the dictionary is not empty.
            If the body has been set before, erase it.
            
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            </summary>
            <param name="dict">Dictionary</param>
            <param name="limit">Limit (optional)</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetBody(System.String,System.Int32)">
            <summary>
            Set the body if the date is not null/whitespaces.
            If a body has been set before, erase it.
            
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            </summary>
            <param name="data">Body value</param>
            <param name="limit">Limit (optional)</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.RemoveBody">
            <summary>
            Remove the body.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.Validate(System.String,System.Int32)">
            <summary>
            Validate that a data is limited to a given size.
            If the limit is lesser or equal to 0, do nothing. 
            </summary>
            <param name="data">Data</param>
            <param name="limit">Limit</param>
            <exception cref="T:Capptain.Agent.CapptainInvalidLogException">The exception thrown if the body is greater than the limit.</exception>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.SetOffset(System.Int64)">
            <summary>
            Set the offset in relation to a given epoch
            </summary>
            <param name="epoch">Capptain epoch time</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.ToXml">
            <summary>
            Convert this object to an XML string
            </summary>
            <returns>A string containing this object as an XML</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainLog.ToString">
            <summary>
            Return the XML form of this log
            </summary>
            <returns>The log as an XML string</returns>
        </member>
        <member name="P:Capptain.Agent.CapptainLog.Name">
            <summary>
            Name.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLog.Extras">
            <summary>
            Extras.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLog.Body">
            <summary>
            Body.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLog.CreationTime">
            <summary>
            Creation time.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainLog.Attributes">
            <summary>
            Attributes.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainAbstractMetadata">
            <summary>
            Capptain Metadata.
            This class contains :
            - the version number
            - the XML namespaces
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.XMLNS">
            <summary>
            Base XML namespace.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.PUSH_XMLNS">
            <summary>
            Push XML namespace.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.REACH_XMLNS">
            <summary>
            Reach XML namespace.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.GEOLOC_XMLNS">
            <summary>
            Jabber Geoloc XML namespace.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_ROOT">
            <summary>
            Key state root name.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_APP_ID">
            <summary>
            Key to store the app id in the device state.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_SDK_KEY">
            <summary>
            Key to store the sdk key in the device state.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_REPORT_LOCATION">
            <summary>
            Key to store the report location flag to the device state.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_REPORT_CRASH">
            <summary>
            Key to store the report crash flag to the device state.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainAbstractMetadata.KEY_STATE_REACH_STATE_MACHINE">
            <summary>
            Key to store the state machine last infos to the device state.
            </summary>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateSessionLog">
            <summary>
            Create a session log.
            </summary>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateActivityLog(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create an activity log.
            </summary>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateIdleLog">
            <summary>
            Create an idle log.
            <idle toffset="50000" sid="9b7bd28d0b7447a1903bb2f6ea91ca6d" id="23085e590a11446e9409d221541140dd"/>
            </summary>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateStartJobLog(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create a startJob log.
            </summary>
            <param name="name">Name</param>
            <param name="jobId">Id</param>
            <param name="extras">Extras</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateEndJobLog(System.String)">
            <summary>
            Create a endJob log.
            </summary>
            <param name="jobId">Id</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateBasicLog(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean,System.String)">
            <summary>
            Create an event log.
            </summary>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
            <param name="session">Is a session event</param>
            <param name="jobId">Is a job event (and the jobid)</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateAppInfoLog(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create an appInfo log.
            </summary>
            <param name="appInfos">AppInfos</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateReachLog(System.String,System.String,System.String,System.String)">
            <summary>
            Create a reach log.
            <reach status="{status}" kind="{announcement|...}" contentid="{id}" />
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Body of the reach message</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateCrashLog(System.String,System.String)">
            <summary>
            Create a crash log.
            </summary>
            <param name="crashId">Id</param>
            <param name="data">Crash dump</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateTechnicalsLog(System.String)">
            <summary>
            Create a technicals log.
            </summary>
            <param name="data">Data</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateLocationLog(System.Xml.Linq.XElement)">
            <summary>
            Create a location log.
            </summary>
            <param name="data">Data</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateGeolocationTag(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a geoloc log.
            </summary>
            <param name="latitude">Latitude (default to null)</param>
            <param name="longitude">Longitude (default to null)</param>
            <param name="countrycode">Country code (default to null)</param>
            <param name="region">Region (default to null)</param>
            <param name="locality">Locality (default to null)</param>
            <returns>Log</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.SetGeolocationChildTag(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Create a <geoloc /> child tag data.
            </summary>
            <param name="root">Root element</param>
            <param name="name">Name</param>
            <param name="data">Data</param>
            <returns>Child as string (empty if no data)</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.GetExtrasLimit">
            <summary>
            Extras limit.
            </summary>
            <returns>Size</returns>
        </member>
        <member name="M:Capptain.Agent.LogBuilder.CreateUUID">
            <summary>
            Create a UUID.
            </summary>
            <returns>A UUID as a string</returns>
        </member>
        <member name="P:Capptain.Agent.LogBuilder.SessionId">
            <summary>
            Session Id
            </summary>
        </member>
        <member name="P:Capptain.Agent.LogBuilder.InfoId">
            <summary>
            Info Id (technicals)
            </summary>
        </member>
        <member name="P:Capptain.Agent.LogBuilder.LocId">
            <summary>
            Location Id
            </summary>
        </member>
        <member name="E:Capptain.Agent.LogBuilder.LocIdRead">
            <summary>
            Triggered when the locId value is read.
            The event arg contains the value of the locId.
            </summary>
        </member>
        <member name="T:Capptain.Agent.LogSpool">
            <summary>
            The LogSpool is made of a List of String contained in a file, thus no sent logs are saved
            even if application is closed.
            </summary>
        </member>
        <member name="F:Capptain.Agent.LogSpool.SPOOL_LIMIT">
            <summary>
            Maximum logs in the spool.
            </summary>
        </member>
        <member name="F:Capptain.Agent.LogSpool.mLock">
            <summary>
            Global lock on the spool instance.
            </summary>
        </member>
        <member name="F:Capptain.Agent.LogSpool.mLogs">
            <summary>
            List of logs.
            </summary>
        </member>
        <member name="M:Capptain.Agent.LogSpool.#ctor(System.Collections.Generic.List{Capptain.Agent.CapptainLog})">
            <summary>
            Create a LogSpool instance.
            Will initialize a storage to a fixed location on the device.
            Will load the logs that hasn't been sent.
            </summary>
        </member>
        <member name="M:Capptain.Agent.LogSpool.Add(Capptain.Agent.CapptainLog)">
            <summary>
            Add a log to the spool.
            </summary>
            <param name="log">The new log</param>
        </member>
        <member name="M:Capptain.Agent.LogSpool.CopyLogs">
            <summary>
            Create a copy of the logs awaiting in the spool.
            </summary>
            <returns>Logs copy</returns>
        </member>
        <member name="M:Capptain.Agent.LogSpool.Delete(System.Int32)">
            <summary>
            Delete a certain number of logs from the spool and the storage.
            Delete the old ones first.
            
            For example, if :
            
              [0: "Sparrow", 1: "Obvious", 2: "Flam"]
              
            Delete(2) will let :
            
              [0: "Flam"]
              
            If the range is greater or equal than the number of logs,
            we simply delete the whole list.
            </summary>
            <param name="count">Number of logs to delete</param>
        </member>
        <member name="M:Capptain.Agent.LogSpool.Clear">
            <summary>
            Delete all logs from the spool and storage.
            </summary>
        </member>
        <member name="M:Capptain.Agent.LogSpool.IsEmpty">
            <summary>
            LogSpool emptiness.
            </summary>
            <returns><code>True</code> if the spool is empty, <code>false</code> otherwise.</returns>
        </member>
        <member name="P:Capptain.Agent.LogSpool.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="T:Capptain.Agent.SessionStates">
            <summary>
            The states available for a session :
            - Started: The end user has started his session and can perform activities.
            - Idled: The application went background, but is still running. The end user can't perform activities.
            - NotStarted: The session is not started so the end-user can't perform activities.
            </summary>
        </member>
        <member name="T:Capptain.Agent.IDeviceStatus">
            <summary>
            Device status.
            
            Allow to retrieve : 
            - Technicals
            - Device id
            </summary>
        </member>
        <member name="M:Capptain.Agent.IDeviceStatus.GetTechnicals">
            <summary>
            Retrieve the technicals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Agent.IDeviceStatus.GetDeviceId">
            <summary>
            Get the device id.
            </summary>
            <returns>Device id</returns>
        </member>
        <member name="T:Capptain.Agent.CapptainIncorrectConfigurationException">
            <summary>
            Capptain incorrect configuration exception.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainException">
            <summary>
            Capptain base exception
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainException.#ctor(System.String)">
            <summary>
            Create a CapptainException
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Capptain.Agent.CapptainException.#ctor(System.String,System.Exception)">
            <summary>
            Create a CapptainException
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Capptain.Agent.CapptainIncorrectConfigurationException.#ctor(System.String)">
            <summary>
            Create a CapptainIncorrectConfigurationException
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Capptain.Agent.CapptainIncorrectConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a CapptainIncorrectConfigurationException
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Capptain.Agent.CapptainNotInitializedException">
            <summary>
            Capptain Agent not initialized exception.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainNotInitializedException.#ctor(System.String,System.String)">
            <summary>
            Create a CapptainInvalidLogException
            </summary>
            <param name="tag">Capptain Tag (Agent or Reach) from Capptain meta data</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Capptain.Agent.CapptainNotInitializedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a CapptainInvalidLogException
            </summary>
            <param name="tag">Capptain Tag (Agent or Reach) from Capptain meta data</param>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Capptain.Agent.CapptainHttpConfig">
            <summary>
            This class contains all the things related to the http configuration of Capptain :
            - Defaults urls
            - Properties to change the urls dynamically
            - Restore to defaults
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_DOMAIN">
            <summary>
            Capptain default domain.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_LOGGER_URL">
            <summary>
            Capptain default logger url.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_IP_TO_COUNTRY_URL">
            <summary>
            Capptain default ip-to-country API url.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_PUSH">
            <summary>
            Capptain default push API.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_PUSH_TOKEN">
            <summary>
            Capptain default push command token url.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_PUSH_MESSAGES">
            <summary>
            Capptain default push command messages url.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.CAPPTAIN_PUSH_REPLY">
            <summary>
            Capptain default push command reply url.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpConfig.WAIT_FOR_LAST_LOGS">
            <summary>
            The amount of seconds to wait before aborting Capptain's last log sending.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpConfig.Reset">
            <summary>
            Reset the urls to the defaults ones.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.LoggerUrl">
            <summary>
            The url of the logger.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.IpToCountryUrl">
            <summary>
            The url of the ip-to-country API.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.PushTokenUrl">
            <summary>
            The url of the push token command.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.PushMessagesUrl">
            <summary>
            The url of the push messages command.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.PushReplyUrl">
            <summary>
            The url of the push reply command.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpConfig.WaitForLastLogs">
            <summary>
            The amount of seconds to wait before aborting Capptain's last log sending.
            </summary>
        </member>
        <member name="T:Capptain.Agent.DigestHttpClient">
            <summary>
            Digest Authentication client for use in Windows Phone 7 Applications.
            </summary>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Send(System.Net.HttpWebRequest,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send a http request
            </summary>
            <param name="request">The request to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Send(System.Net.HttpWebRequest,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send a http request with data
            </summary>
            <param name="request">The request to send</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it instantly
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Post(System.String,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it rightaway.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Post(System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it rightaway.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a get request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.Get(System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a get request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreateRequest(System.Uri,System.String)">
            <summary>
            Create a http request
            </summary>
            <param name="uri">The uri object of the request</param>
            <param name="method">
            The method of the request. 
            This method does not guarantee that the method must be a valid one.
            </param>
            <returns>The created request</returns>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreateRequest(System.String,System.String)">
            <summary>
            Create a http request
            </summary>
            <param name="uri">The string uri of the request</param>
            <param name="method">
            The method of the request. 
            This method does not guarantee that the method must be a valid one.
            </param>
            <returns>The created request</returns>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreatePostRequest(System.String)">
            <summary>
            Create a post http request.
            </summary>
            <param name="uri">Uri</param>
            <returns>Request</returns>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreateGetRequest(System.String)">
            <summary>
            Create a get http request.
            </summary>
            <param name="uri">Uri</param>
            <returns>Request</returns>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreateQueryString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string from a dictionary and a uri
            </summary>
            <param name="uri">The base uri</param>
            <param name="parameters">The parameters</param>
            <returns>The query string with encoded values</returns>
        </member>
        <member name="M:Capptain.Agent.IHttpClient.CreateQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string from a dictionary
            </summary>
            <param name="parameters">The parameters</param>
            <returns>The parameter part of a query string</returns>
        </member>
        <member name="M:Capptain.Agent.HttpClient.CreateQueryString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a quiry string for a uri and a list of parameters
            </summary>
            <param name="uri">API URI</param>
            <param name="parameters">Data</param>
            <returns>
            A query string.
            
            For example, if you call :
            
            $ CreateQueryString("http://example.com/api", { "value": "test", "info" : "42" });
            
            You get :
            
            $ "http://example.com/api?value=test&amp;info=42"
            </returns>
        </member>
        <member name="M:Capptain.Agent.HttpClient.CreateQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string for a list of parameters
            </summary>
            <param name="parameters">Data</param>
            <returns>
            A query string.
            
            For example, if you call :
            
            $ CreateQueryString({ "value": "test", "info" : "42" });
            
            You get :
            
            $ "?value=test&amp;info=42"    
            </returns>
        </member>
        <member name="M:Capptain.Agent.HttpClient.AddBody(System.Net.HttpWebRequest,System.String,System.Action,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Add a body to the request
            </summary>
            <param name="request">The http request</param>
            <param name="data">The data to add</param>
            <param name="callback">The result callback</param>
            <param name="baseCallback">The originated callback.</param>
        </member>
        <member name="F:Capptain.Agent.DigestHttpClient.mStore">
            <summary>
            The capptain backend set a cookie containing a string used by the authentification.
            We must store it globally to give it to the authenticated request.
            </summary>
        </member>
        <member name="F:Capptain.Agent.DigestHttpClient.mHasTriedDigest">
            <summary>
            Limit the number of digest attempts to one.
            </summary>
        </member>
        <member name="F:Capptain.Agent.DigestHttpClient.mCanForwardUnauthorized">
            <summary>
            Enable or disable digest process
            </summary>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.#ctor(System.String,System.String)">
            <summary>
            Initialize the digest authentication client with a username and password.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.Post(System.String,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}},System.Boolean)">
            <summary>
            Create a post request and send it instantly
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
            <param name="canForwardUnauthorized">Could we forward unauthorized Http code to the callback? If it's forwarded, the digest http process will not be performed.</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.Send(System.Net.HttpWebRequest,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send an http request
            </summary>
            <param name="request">The http request</param>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.Send(System.Net.HttpWebRequest,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            
            </summary>
            <param name="request">The http request</param>
            <param name="data">Data to be sent</param>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.SendSync(System.Net.HttpWebRequest,System.String)">
            <summary>
            Send a request synchronously. 
            The body will be set on the same thread.
            The request have a dedicated amount of time to complete otherwise it's aborted.
            
            This allows us to have a request that will not block the fast-switching
            feature of Windows Phone when returning on the app.
            
            CAREFUL : the digest auth will not processed when using this method.
            In Windows Phone there is no time to do such verbose process when App goes background.
            In Windows store App this process is, at least, performed when sending the Idle log just before Capptain being terminated.
            However, if the digest auth has been processed before this request,
            we will use the cookie container and it should work correctly.
            </summary>
            <param name="request">Request</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.HandleResponse(System.Net.HttpWebResponse,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Handle the response, and invoke the callback depending on the result.
            </summary>
            <param name="response">The request's response</param>
            <param name="callback">On response callback</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.HandleDigest(System.Net.WebException,System.Net.HttpWebRequest,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Handle the digest processing.
            </summary>
            <param name="e">The web exception from the previous request</param>
            <param name="request">The old request</param>
            <param name="data">Request data</param>
            <param name="callback">On response callback</param>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.RequestCompleted(System.IAsyncResult,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Request has been completed
            </summary>
            <param name="result">Http result</param>
            <param name="data">Sent data</param>
            <param name="callback">Callback</param>
        </member>
        <member name="F:Capptain.Agent.DigestHttpClient.RegexNameValuePair">
            <summary>
            Regular expression to get header fields
            </summary>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.BuildParameterDictionary(System.String)">
            <summary>
            Build parameter dictionary
            </summary>
            <param name="header">The http header</param>
            <returns>The header dictionary</returns>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.GenerateNewCNonce">
            <summary>
            Generate a new cnonce
            </summary>
            <returns>The cnonce</returns>
        </member>
        <member name="M:Capptain.Agent.DigestHttpClient.GetAuthorizationHeader(System.Uri,System.String)">
            <summary>
            Build authorization header
            </summary>
            <param name="uri">URI to send to</param>
            <param name="method">Http method</param>
            <returns>The authorization header</returns>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.STORAGE_PATH">
            <summary>
            Storage location.
            
            DO NOT CHANGE this value.
            Even if the name is weird, it's there for legacy reason.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.DEFAULT_EPOCH">
            <summary>
            Default epoch value.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.DEFAULT_BURST_THRESHOLD">
            <summary>
            Default value for the burst threshold.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.TIMEOUT">
            <summary>
            Request time out.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.sBurstThreshold">
            <summary>
            Delay between each request to the http logger.
            In milliseconds.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mEpoch">
            <summary>
            The epoch is a capptain referential sent at the beginning of the HTTP session.
            Each subsequent log will refer its creation time to this time.
            
            By default, or when the epoch is invalid, we set its value to long.MaxValue.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mLogWorkerTask">
            <summary>
            The log worker asynchroneous task.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mCancellationTokenSource">
            <summary>
            Task cancellation token.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mTaskHandler">
            <summary>
            Task synchronization.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mRetryHandler">
            <summary>
            Retry handling.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainHttpLogService.mIsDisabledInHardMode">
            <summary>
            Indicate if the application has been disabled by the backend (in hard mode).
            An application can be :
            - activated
            - disabled (soft mode)
            - disabled (hard mode)
            
            When an application is disabled in hard mode, no logs are stored and nothing 
            is send at all.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.#ctor(System.String,Capptain.Agent.INetworkStatus)">
            <summary>
            Initializes an Http log service.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="networkStatus">The network status.</param>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.Open">
            <summary>
            Open the service.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.Close">
            <summary>
            Close the service.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.Run">
            <summary>
            Service task.
            
            Two steps : 
            - if the epoch is invalid, sent it
            - otherwise, send the bundle, either in burst mode or in real-time
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.SendLog(Capptain.Agent.CapptainLog)">
            <summary>
            Tell to the service to send a new log.
            </summary>
            <param name="log">Log to send</param>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.SaveLogs">
            <summary>
            Save logs when app visibility change.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.SendLastBatch(System.Collections.Generic.List{Capptain.Agent.CapptainLog})">
            <summary>
            Add some logs to the spool, and try to send them, without waiting for a response.
            Use this method when the application is about to close.
            Because we do not wait for the response, the UI Thread will not be blocked if the 
            application is reactivated. The tradeoff is that the logs won't be cleaned from the
            spool, even if they reach the back-end.
            So we will re-send them when the application will be restarted. The back-end will delete
            them if it had already received the logs previously.
            </summary>
            <param name="lastLogs">Logs to send (generally, endJob, endSession and an eventual crash)</param>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.SendEpoch">
            <summary>
            Send the epoch.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.SendBundle">
            <summary>
            Send a bundle (list of logs).
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.Send(System.String,System.Boolean)">
            <summary>
            Send data to the capptain backend via http.
            </summary>
            <param name="data">Data</param>
            <param name="canForwardUnauthorized">Does the http client 
            will be allowed to forward http 401 unauthorized response </param>
            <returns>
            Return the http status code of the http request.
            If the request has been sent correctly, the exact
            status code will be returned.
            Otherwise, return a Request Timeout code (the request must be
            done in TIMEOUT seconds, otherwise, we will terminate it).
            </returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.HandleError(System.Nullable{System.Net.HttpStatusCode},System.Collections.Generic.List{Capptain.Agent.CapptainLog})">
            <summary>
            Handle exceptionnal cases for a request, at a Capptain level
            (to change the state of the service, not to manage HTTP request).
            - Authentification error
            - Invalid app
            - Disabled app (soft or hard mode)
            </summary>
            <param name="code">The HTTP code status</param>
            <param name="sentLogs">Logs sent or tried to be sent.</param>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.IsEpochInvalid">
            <summary>
            Indicate if the epoch is invalid.
            </summary>
            <returns>True if invalid (not set), false otherwise</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.ResetEpoch">
            <summary>
            Reset the epoch.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.IsNetworkAvailable">
            <summary>
            Indicate if the network is available.
            Check also if the logger url exists.
            </summary>
            <returns>True if available, false otherwise (do not send logs in this case).</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.IsNotDisabledInHardMode">
            <summary>
            Indicate if the application has been hard disabled on the frontend.
            </summary>
            <returns>
            If it's disabled, print a message and return false.
            True otherwise.
            </returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.HasBurstThresholdActivated">
            <summary>
            Indicate if the burst threshold mode is activated.
            </summary>
            <returns>True if activated, false otherwise</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.PrepareLogsFromSpool">
            <summary>
            Get a prepared list of logs from the spool.
            Before sending logs, you should always use this method and
            work on this copy.
            </summary>
            <returns>A list of prepared logs</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.GetLoggerUrl">
            <summary>
            Get the url of the logger.
            </summary>
            <returns>URL as string</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.ComputeUsername(System.String,System.String)">
            <summary>
            Compute a "username" with the capptain app config infos.
            </summary>
            <param name="appId">Capptain application id</param>
            <param name="deviceId">Capptain device id</param>
            <returns>Username</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainHttpLogService.ComputePassword(System.String,System.String)">
            <summary>
            Compute a "password" with the capptain app config infos and username.
            </summary>
            <param name="sdkKey">Capptain sdk key</param>
            <param name="username">Username computed with `ComputeUsername`</param>
            <returns>Password</returns>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpLogService.BurstThreshold">
            <summary>
            The burst threshold is the delay between each request to the logger.
            The value can be greater than one second. Otherwise, the threshold is reset to its default value,
            which will indicate to the connection that there is no threshold at all.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpLogService.Http">
            <summary>
            Http client
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpLogService.LogSpool">
            <summary>
            LogSpool
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpLogService.NetworkStatus">
            <summary>
            Network status.
            </summary>
        </member>
        <member name="P:Capptain.Agent.CapptainHttpLogService.WillTerminate">
            <summary>
            Will terminate
            </summary>
        </member>
        <member name="T:Capptain.Agent.INetworkStatus">
            <summary>
            Network status encapsulation.
            </summary>
        </member>
        <member name="M:Capptain.Agent.INetworkStatus.IsNetworkAvailable">
            <summary>
            Indicate if the network is available.
            </summary>
            <returns>True if available, false otherwise</returns>
        </member>
        <member name="M:Capptain.Agent.INetworkStatus.SetNetworkChangeHandler(System.Action)">
            <summary>
            Add a handler on a network change.
            </summary>
            <param name="action">Handler</param>
        </member>
        <member name="T:Capptain.Agent.Coordinates">
            <summary>
            Coordinates representation.
            </summary>
        </member>
        <member name="P:Capptain.Agent.Coordinates.Latitude">
            <summary>
            Latitude.
            </summary>
        </member>
        <member name="P:Capptain.Agent.Coordinates.Longitude">
            <summary>
            Longitude.
            </summary>
        </member>
        <member name="M:Capptain.Agent.ILocationStatus.GetCurrentPosition">
            <summary>
            Return the current position.
            </summary>
            <returns>Coordinates</returns>
        </member>
        <member name="M:Capptain.Agent.ILocationStatus.SetLocationUpdateHandler(System.Double,System.Action)">
            <summary>
            Add the given callback to the onLocationUpdated event.
            </summary>
            <param name="movement">Movement threshold</param>
            <param name="action">Action to execute when the location has changed.</param>
        </member>
        <member name="T:Capptain.Agent.AgentFactory">
            <summary>
            Provide information and utilities inherent to the running platform.
            </summary>
        </member>
        <member name="F:Capptain.Agent.AgentFactory.sFactory">
            <summary>
            Unique static instance
            </summary>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateHMACSHA1">
            <summary>
            Return a IHMACSHA1 implementation.
            </summary>
            <returns>HMACSHA1 implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateStorage``1(System.String)">
            <summary>
            Return an IStorage implementation.
            </summary>
            <typeparam name="T">Type of the storage</typeparam>
            <param name="path">Storage location path</param>
            <returns>IStorage implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateNetworkStatus">
            <summary>
            Return an INetworkStatus implementation.
            </summary>
            <returns>INetworkStatus implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateDeviceStatus">
            <summary>
            Return an IDeviceStatus implementation.
            </summary>
            <returns>IDeviceStatus implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateLocationStatus">
            <summary>
            Return an ILocationStatus implementation.
            </summary>
            <returns>ILocationStatus implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.CreateApplicationLifecycleManager">
            <summary>
            Return an IApplicationLifecycleManager implementation.
            </summary>
            <returns>IApplicationLifecycleManager implementation</returns>
        </member>
        <member name="M:Capptain.Agent.AgentFactory.GetDeviceId">
            <summary>
            Return a device id.
            </summary>
            <returns>Device id</returns>
        </member>
        <member name="P:Capptain.Agent.AgentFactory.Instance">
            <summary>
            AgentFactory object
            </summary>
        </member>
        <member name="T:Capptain.Agent.CapptainLocationService">
            <summary>
            Capptain location manager.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.GOOGLE_MAP_URI_GEOCODING">
            <summary>
            API URI.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.GOOGLE_MAP_URI_FORMAT">
            <summary>
            API format.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.GOOGLE_MAP_STATUS_OK">
            <summary>
            API OK status.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.KEY_COUNTRYCODE">
            <summary>
            Country code key.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.KEY_REGION">
            <summary>
            Region key.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.KEY_LOCALITY">
            <summary>
            Locality key.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.MOVEMENT_THRESHOLD">
            <summary>
            Movement threshold for the location watcher.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.mHttp">
            <summary>
            Http client.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CapptainLocationService.mLocationStatus">
            <summary>
            Location status provider.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.GetLocationIpInformations(System.Action{System.String})">
            <summary>
            Call the /ip-to-country API to find the country code.
            </summary>
            <param name="callback">
            Task to execute when this method will end.
            Contains the country code as a string.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.GetCurrentPositionInformations(System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Get the informations about the current position.
            This method executes an asynchronous task, 
            and will call the given callback when the task is finished.
            </summary>
            <param name="callback">
            Task to execute when this method will end.
            Contains a dictionary with the `locality`, `region` and/or `countrycode`.
            </param>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.GetCurrentPosition">
            <summary>
            Get the current position.
            </summary>
            <returns>Coordinates</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.CallGeocodeAPI(Capptain.Agent.Coordinates,System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Call the /geocode API.
            </summary>
            <param name="position">Current position</param>
            <param name="callback">Result callback, containg the informations.</param>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.ConvertResult(System.String)">
            <summary>
            Convert a GeocodeResponse XML data to a dictionary containing:
            * {"countrycode" => "the country code"}
            * {"region" => "the region"}
            * {"locality" => "the city"}
            </summary>
            <param name="data">Xml</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainLocationService.AddElement(System.Xml.Linq.XElement,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get the value of the `childName` element of the component XElement.
            Put this value to a dictionary for a given `key`.
            </summary>
            <param name="component">Container</param>
            <param name="childName">Childname</param>
            <param name="dict">Dictionary</param>
            <param name="key">Dictionary key</param>
        </member>
        <member name="T:Capptain.Agent.CapptainJson`1">
            <summary>
            CapptainJson reader/writer.
            </summary>
            <typeparam name="T">Type of the object to read/write</typeparam>
        </member>
        <member name="M:Capptain.Agent.CapptainJson`1.Read(System.String)">
            <summary>
            Read a json string and convert it to an object
            </summary>
            <param name="data">Json string</param>
            <returns>T object</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainJson`1.Write(`0)">
            <summary>
            Convert an object to a json string
            </summary>
            <param name="data">T object</param>
            <returns>Json string</returns>
        </member>
        <member name="T:Capptain.Agent.EventArgs`1">
            <summary>
            Typed event args
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="F:Capptain.Agent.EventArgs`1.Empty">
            <summary>
            Empty constant for a typed event args
            </summary>
        </member>
        <member name="M:Capptain.Agent.EventArgs`1.#ctor(`0)">
            <summary>
            Create a typed event args
            </summary>
            <param name="value">Value of the specified type</param>
        </member>
        <member name="P:Capptain.Agent.EventArgs`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Capptain.Agent.EventExtensions">
            <summary>
            Event extension methods
            </summary>
        </member>
        <member name="M:Capptain.Agent.EventExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Raise an event. This extension allows us to bypass the existence test in our code.
            It checks if the event is not null, and call it if it's the case.
            Follow the .net guidelines for the event (eg. a sender and an EventArgs class).
            </summary>
            <param name="self">An EventHandler event</param>
            <param name="sender">The sender object</param>
        </member>
        <member name="M:Capptain.Agent.EventExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raise an event. This extension allows us to bypass the existence test in our code.
            It checks if the event is not null, and call it if it's the case.
            Follow the .net guidelines for the event (eg. a sender and a derivated EventArgs class).
            </summary>
            <typeparam name="T">The type of the EventArgs subclass</typeparam>
            <param name="self">An EventHandler event</param>
            <param name="sender">The sender object</param>
            <param name="args">The EventArgs subclass</param>
        </member>
        <member name="T:Capptain.Agent.CapptainInvalidLogException">
            <summary>
            Capptain invalid log exception.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainInvalidLogException.#ctor(System.String)">
            <summary>
            Create a CapptainInvalidLogException.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Capptain.Agent.CapptainInvalidLogException.#ctor(System.String,System.Exception)">
            <summary>
            Create a CapptainInvalidLogException.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Capptain.Agent.CapptainComplexJson">
            <summary>
            CapptainComplexJson writer.
            Can serialize a dictionary, a list and other objects.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainComplexJson.Write(System.Object)">
            <summary>
            Convert an object to a json string
            </summary>
            <param name="data">Object</param>
            <returns>Json string</returns>
        </member>
        <member name="M:Capptain.Agent.CapptainComplexJson.Convert(System.Text.StringBuilder,System.Object)">
            <summary>
            Convert any value and write its output to a builder.
            Recursive function.
            </summary>
            <param name="builder">Output</param>
            <param name="data">Data to convert</param>
        </member>
        <member name="M:Capptain.Agent.CapptainComplexJson.WriteDictionary(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Convert a dictionary and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="dictionary">Dictionary to convert</param>
        </member>
        <member name="M:Capptain.Agent.CapptainComplexJson.WriteArray(System.Text.StringBuilder,System.Collections.IEnumerable)">
            <summary>
            Convert an array and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="array">Array to convert</param>
        </member>
        <member name="M:Capptain.Agent.CapptainComplexJson.WritePair(System.Text.StringBuilder,System.Object,System.Object)">
            <summary>
            Convert a pair and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:Capptain.Agent.CapptainXml`1">
            <summary>
            Read xml from a string.
            We can not use the DataContractSerializer because we use attributes in our backend.
            Fallback to XmlSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Capptain.Agent.CapptainXml`1.Read(System.String)">
            <summary>
            Read a xml string and convert it to an object.
            </summary>
            <param name="data">Xml data</param>
            <returns>T object</returns>
        </member>
        <member name="T:Capptain.Agent.Logger">
            <summary>
            Simple log wrapper
            </summary>
        </member>
        <member name="M:Capptain.Agent.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Display a trace for debugging.
            
            Example :
            
              Debug("[Capptain]", "trace");
              $ "[Capptain] trace."
              
              Debug("[Capptain]", "trace", "more trace");
              $ "[Capptain] trace."
              $ "more trace"
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <param name="more">More content (line break before)</param>
        </member>
        <member name="M:Capptain.Agent.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Display an info trace.
            This trace is visible in release mode.
            
            Example :
            
              Info("[Capptain]", "trace");
              $ "[Capptain] trace."
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <param name="more">More content (line break before)</param>
        </member>
        <member name="M:Capptain.Agent.Logger.CreateMessage(System.String,System.Object)">
            <summary>
            Create a log message.
            
            Example :
              
              CreateMessage("[Capptain]", "log");
              $ -> "[Capptain] trace."
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <returns>Formatted message</returns>
        </member>
        <member name="T:Capptain.Agent.MD5">
            <summary>
            MD5 utility
            </summary>
        </member>
        <member name="M:Capptain.Agent.MD5.Hash(System.String)">
            <summary>
            Create a MD5 hash of the value, in lower case.
            </summary>
            <param name="value">Value</param>
            <returns>Hash (lower case)</returns>
        </member>
        <member name="T:Capptain.Agent.RetryHandler">
            <summary>
            Retry handling.
            </summary>
        </member>
        <member name="F:Capptain.Agent.RetryHandler.MAX_RETRY_THRESHOLD">
            <summary>
            Maximum time before a failed attempt and a new retry.
            In milliseconds : 60min (3.600.000 = 1000 * 60 * 60 = 60min)
            </summary>
        </member>
        <member name="F:Capptain.Agent.RetryHandler.BASE_RETRY_THRESHOLD">
            <summary>
            Base time before a failed attempt and a new retry.
            In milliseconds : 1s (1.000 = 1000 * 1 = 1s)
            </summary>
        </member>
        <member name="F:Capptain.Agent.RetryHandler.COEFFICIENT_RETRY_THRESHOLD">
            <summary>
            Coefficient to apply after each new attempt.
            </summary>
        </member>
        <member name="F:Capptain.Agent.RetryHandler.mAwaitHandler">
            <summary>
            Awaiter.
            </summary>
        </member>
        <member name="M:Capptain.Agent.RetryHandler.#ctor">
            <summary>
            Create a new retry handler.
            </summary>
        </member>
        <member name="M:Capptain.Agent.RetryHandler.Increase">
            <summary>
            Increate the current threshold, except if it has reached its max time.
            </summary>
        </member>
        <member name="M:Capptain.Agent.RetryHandler.AwaitAndIncrease">
            <summary>
            Increase the retry threshold, and pause the current thread for this time.
            </summary>
        </member>
        <member name="M:Capptain.Agent.RetryHandler.CancelAwait">
            <summary>
            Resume the current thread if it has been paused.
            </summary>
        </member>
        <member name="M:Capptain.Agent.RetryHandler.Reset">
            <summary>
            Reset the retry threshold.
            </summary>
        </member>
        <member name="P:Capptain.Agent.RetryHandler.Threshold">
            <summary>
            Retry threshold.
            Each time a request fails, we wait for a given time before a new attempt.
            This time is increased for each new attempt.
            </summary>
        </member>
        <member name="T:Capptain.Agent.CommandWorker">
            <summary>
            This class manages a Worker task wich goal is to execute each task from a command queue.
            It is a producer / consumer pattern, just enqueue task then the worker will execute one by one in FIFO order.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CommandWorker.mCommandQueue">
            <summary>
            A list that stores all the commands that has been called before the service instanciation.
            When the service is ready, we replay these commands.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CommandWorker.mLock">
            <summary>
            Global lock on the action list.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CommandWorker.mTaskHandler">
            <summary>
            Monitor for multi-thread management.
            </summary>
        </member>
        <member name="F:Capptain.Agent.CommandWorker.HeadCommand">
            <summary>
            The unique high priority command. 
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.#ctor">
            <summary>
            The CancellationTokenSource and ManualResetEvent from the caller class or from this class references the same storage in memory. 
            Even if them referenced values change they will point out the same object. 
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.Enqueue(System.Action)">
            <summary>
            Add a command to the spool. Then, signal the consumer task to execute it.
            </summary>
            <param name="command">The new command</param>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.GetNextAction">
            <summary>
            Remove a command from the spool. Signal the consumer to wait if there is no more commands available in the spool.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.AddHeadAction(System.Action)">
            <summary>
            Set the current head command or replace it if it was already set.
            The head command is of the highest priority.
            </summary>
            <param name="command">The new command</param>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.Clear">
            <summary>
            Remove all commands from the spool.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.AsyncWorker(System.Threading.CancellationToken,System.Threading.ManualResetEvent)">
            <summary>
            The command consumer task.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.Start">
            <summary>
            Start or restart the worker thread.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.Stop">
            <summary>
            Stop the worker.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CommandWorker.Execute(System.Action)">
            <summary>
            Execute a command and catch exceptions.
            </summary>
            <param name="command">Command</param>
        </member>
        <member name="P:Capptain.Agent.CommandWorker.AsyncWorkerTask">
            <summary>
            Get the command worker task.
            </summary>
            <value>
            The worker task.
            </value>
        </member>
        <member name="P:Capptain.Agent.CommandWorker.CancellationTokenSource">
            <summary>
            Task cancellation token.
            </summary>
        </member>
        <member name="T:Capptain.Agent.Trace">
            <summary>
            Helper to write trace with the release configuration
            </summary>
        </member>
        <member name="M:Capptain.Agent.Trace.WriteLine(System.String)">
            <summary>
            Write in the console.
            This traces are visible even with the release configuration.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:Capptain.Agent.CapptainViewModel">
            <summary>
            Abstract base class for the Capptain view models.
            Implements INotifyPropertyChanged.
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainViewModel.#ctor">
            <summary>
            Create an empty view model
            </summary>
        </member>
        <member name="M:Capptain.Agent.CapptainViewModel.NotifyPropertyChanged(System.String)">
            <summary>
            NotifyPropertyChanged implementation.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:Capptain.Agent.CapptainViewModel.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
    </members>
</doc>
