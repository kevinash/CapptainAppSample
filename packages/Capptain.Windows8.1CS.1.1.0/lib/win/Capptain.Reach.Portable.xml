<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Capptain.Reach.Portable</name>
    </assembly>
    <members>
        <member name="T:Capptain.Reach.CapptainPortableReach">
            <summary>
            Capptain Reach handler.
            Initialize the SDK and manage the push queue.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.MAX_TOAST_ID_TO_STORE">
            <summary>
            The maximum number of toast's Capptain ID to store in the pending toast list.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.sInstance">
            <summary>
            Module instance.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mCommandWorker">
            <summary>
            Thread safe command spool.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mAppLifecycle">
            <summary>
            The Reach application life cycle manager, it handles application life cycle events.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mAgentLifeCycle">
            <summary>
            The Agent application life cycle manager, it handles application life cycle events.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mInteractiveMessageStateMachine">
            <summary>
            The interactive message state machine, it manages interractive reach push messages.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mParser">
            <summary>
            A JSON parser to parse raw messages received from backend.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPortableReach.mToastMessageMonitor">
            <summary>
            This monitor takes care of the toast message life cycle.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.#ctor(Capptain.Reach.ReachFactory)">
            <summary>
            protected constructor to prevent instanciation outside child.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.PortableInit``2(``0,``1)">
            <summary>
            Initialize reach asynchronously, this avoids an excessive delay in the customer's app initialization.
            It is not asynchronous itself so it needs to be run on a Task Factory.
            </summary>
            <typeparam name="T">The Task type.</typeparam>
            <typeparam name="GenericStartState">The default reach machine state type.</typeparam>
            <param name="continuation">The continuation task.</param>
            <param name="savedStateMachine">The saved state machine.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.InitInteractiveStateMachine(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            Initialize the interactive state machine and start it.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.SetToken(System.String)">
            <summary>
            Send the device token to the backend for MPNS purpose.
            </summary>
            <param name="token">The device token</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.GetPendingMessages">
            <summary>
            Get pending messages from backend.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.GetToastMessage(System.Int32)">
            <summary>
            Get the corresponding toast message with the given Capptain push ID.
            </summary>
            <param name="capptainPushID">The Capptain push identifier.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.PrintMessages">
            <summary>
            Print messages from the spool.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.BindChannel">
            <summary>
            Bind the push channel to MPNS.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.UnbindChannel">
            <summary>
            Unbind the push channel to MPNS.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.ProcessRawMessages(System.String)">
            <summary>
            Process incoming raw messages into Capptain messages.
            </summary>
            <param name="messages">The raw data containing the messages</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.ProcessDataPush(Capptain.Reach.CapptainReachContent)">
            <summary>
            Process a datapush
            </summary>
            <param name="content">The datapush</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.EnableNativePush">
            <summary>
            Enable the native push (MPNS) for Capptain.Reach. This will allow the reach module to receive push notifications from MPNS.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.DisableNativePush">
            <summary>
            Disable the native push (MPNS) for Capptain.Reach. This will disallow the reach module to receive push notifications from MPNS.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.StartRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK is trying to retrieve the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.CompleteRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK has received the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.FailRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK has failed to retrieve the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnRawMessagesReceived(System.Object,Capptain.Reach.MessagesApiEventArgs)">
            <summary>
            Called when raw messages are received from backend.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The <see cref="T:Capptain.Reach.MessagesApiEventArgs"/> sInstance containing the event data.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnSuspended">
            <summary>
            Called when the application is suspended.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnSessionIdled(System.Object,System.EventArgs)">
            <summary>
            Called when the session has been idled.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnEndSession(System.Object,System.EventArgs)">
            <summary>
            Session ending handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnProcessPendingMessages(System.Object,Capptain.Reach.MessagesApiEventArgs)">
            <summary>
            Pending messages handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnProcessToastMessage(System.Int32)">
            <summary>
            A message has resumed the application, an instance of the interactive content state machine is currently running.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnHasMessage">
            <summary>
            There is a message ready to be shown to the user.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnStartActivity(System.Object,System.EventArgs)">
            <summary>
            Start activity handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnReachMessageException">
            <summary>
            Handler for reach message exceptions.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnNotificationDisplayed">
            <summary>
            Reach notification displayed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnNotificationActioned">
            <summary>
            Reach notification actioned handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnNotificationDismissed">
            <summary>
            Reach notification dismissed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnContentDisplayed">
            <summary>
            Reach content displayed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnContentActioned(System.String)">
            <summary>
            Reach content actioned handler.
            </summary>
            <param name="body">A feedback body.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnContentDismissed">
            <summary>
            Reach content dismissed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnAppResumption">
            <summary>
            Application resumption handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnNotificationRemoved">
            <summary>
            Reach notification removed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnContentRemoved">
            <summary>
            Reach content removed handler.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnAppSuspended">
            <summary>
            App Suspend.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPortableReach.OnPushServicePropertyChange(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handle push service property change.
            <remarks> 
            DON'T set the <see cref="P:Capptain.Reach.PushService.PushServiceState"/> property in here it will dead lock the push service.
            </remarks>
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.MessagesFromApiProcessed">
            <summary>
            Occurs when messages from API are processed by agent.
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.DataPushStringReceived">
            <summary>
            Event when receiving a string datapush.
            
            The callback must of the form :
            <b>bool</b> OnDataPushStringReceived(<b>string body</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.DataPushBase64Received">
            <summary>
            Event when receiving a base64 datapush.
            
            The callback must be of the form :
            <b>bool</b> OnDataPushBase64Received(<b>byte[] decodedBody</b>, <b>string encodedBody</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.PushMessageReceived">
            <summary>
            Event when receiving a push message.
            
            The callback must be of the form :
            void OnPushMessageReceived(<b>int id</b>, <b>bool replyTo</b>, <b>string payload</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.RetrieveLaunchMessageStarted">
            <summary>
            Invoked when Capptain is about to retrieve the push message that launched the application (from MPNS).
            It is a good opportunity to start displaying a message to the end user indicating that data is being loaded.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.RetrieveLaunchMessageCompleted">
            <summary>
            Invoked when Capptain received the push message that launched the application.
            Use this opportunity to hide any loading message and display appropriate content to the end user.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainPortableReach.RetrieveLaunchMessageFailed">
            <summary>
            Invoked when Capptain failed to retrieve the push message that launched the application.
            Use this opportunity to hide any loading message and to display a dialog to the end user 
            indicating that the message could not be fetched.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainPortableReach.Instance">
            <summary>
            Gets the unique instance of the internal Capptain reach.
            </summary>
            <value>
            The unique instance.
            </value>
        </member>
        <member name="P:Capptain.Reach.CapptainPortableReach.PendingToastList">
            <summary>
            The pending toast list before they are dropped or processed by the content state machine.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainMessage">
            <summary>
            CapptainMessage (contains a payload and some metadata)
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Reach.CapptainMessage"/> class with default values.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.IsPayloadType(System.String)">
            <summary>
            Indicate if the payload is of a given type.
            </summary>
            <param name="expected">The expected type of the payload.</param>
            <returns>True if it corresponds, false otherwise.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.GetPayloadAsObject">
            <summary>
            Get the payload of the message as a CapptainReachAnnouncement.
            </summary>
            <exception cref="T:Capptain.Reach.CapptainInvalidPayloadException"></exception>
            <returns>A CapptainReachAnnouncement object</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.ToString">
            <summary>
            Print the message
            </summary>
            <returns>A json-formatted string</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.Id">
            <summary>
            Message id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.Payload">
            <summary>
            Message payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.ReplyTo">
            <summary>
            Message replyto id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.NextState">
            <summary>
            The next state in the interactive state machine for this content.
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.NotificationAlreadyBeenDisplayed">
            <summary>
            Know if notification has already been displayed
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.ContentAlreadyBeenDisplayed">
            <summary>
            Know if announcement has already been displayed
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachContent">
            <summary>
            CapptainReachContent
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachContent.DeviceIdRegex">
            <summary>
            Device id regex (cached)
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachContent.mDeviceId">
            <summary>
            The device id needs to be stored locally because if the application is killed then restored on this announcement,
            then, There is no possibility to be sure that the portable part of the Capptain SDK is instantiated.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.#ctor(Capptain.Reach.CapptainMessage)">
            <summary>
            Create a content
            </summary>
            <param name="message">The message used to create the content</param>
            <exception cref="T:Capptain.Reach.CapptainInvalidPayloadException">The paylod may be invalid when created.</exception>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Show">
            <summary>
            Present the content as a notification.
            </summary>
            <exception cref="T:Capptain.Reach.CapptainInvalidNotificationCreationException">
            If the notification cannot be created.
            </exception>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ShowContent">
            <summary>
            Show the content to the user.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.RemoveNotification">
            <summary>
            Remove a notification from UI.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.RemoveContent">
            <summary>
            Remove a content from UI.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ConvertDeviceIdTag(System.String)">
            <summary>
            {deviceid} tag => real device id converter
            </summary>
            <param name="data">String to examine</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ParseDeviceId(Capptain.Reach.CapptainReachPayload)">
            <summary>
            Parse the (eventual) url or body of the content and change
            the {deviceid} tag to the real device id.
            </summary>
            <param name="payload"> a Capptain reach payload </param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.SendFeedback(System.String,System.String)">
            <summary>
            Helper to send a feedback to the capptain backend
            </summary>
            <param name="status">Type of the feedback</param>
            <param name="body">An eventual body to send with the feedback</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.TrashIfExpiry">
            <summary>
            Test if the content is expirable, and trash it if needed
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.DisplayNotification(System.Boolean)">
            <summary>
            Signal to display the notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ActionNotification(System.Boolean)">
            <summary>
            Signal to action the notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ExitInAppNotification">
            <summary>
            Signal to exit the current notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.DisplayContent">
            <summary>
            Signal to display the content
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ActionContent(System.String)">
            <summary>
            Signal to action the content
            </summary>
            <param name="body">Payload</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.DismissContent">
            <summary>
            Signal to exit the content
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Drop">
            <summary>
            Signal to drop the content
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachContent.Message">
            <summary>
            The message of the current content
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachContent.Payload">
            <summary>
            Content announcement
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachContent.DeviceId">
            <summary>
            The device id needs to be preserved for a later standalone use. 
            For example when the App goes tombstone then the page is loaded by the system before the Capptain instance.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachAnnouncement">
            <summary>
            CapptainReachAnnouncement
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPagePayload">
            <summary>
            All page content should inherit from this class (announcement, poll)
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachInteractivePayload">
            <summary>
            All reach content (except datapush) should inherit from this class.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload">
            <summary>
            CapptainReachPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.#ctor">
            <summary>
            Create a CapptainReachPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.GetReachType">
            <summary>
            Indicate the type of the reach payload.
            </summary>
            <returns>The string representation of the reach type.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.HasExpiry">
            <summary>
            Indicate if the payload has an expiration date.
            </summary>
            <returns>True if there is an expiry, false otherwise</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Id">
            <summary>
            Payload id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Category">
            <summary>
            Payload category
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Expiry">
            <summary>
            Payload expiration date
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ActionPayload">
            <summary>
            ActionPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ActionPayload.DEFAULT_LABEL">
            <summary>
            Default value
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ActionPayload.#ctor">
            <summary>
            Create an ActionPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ActionPayload.Label">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ActionPayload.Url">
            <summary>
            Action URL
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.AnswerPayload">
            <summary>
            Answer payload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.AnswerPayload.mIsChecked">
            <summary>
            Check status
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.AnswerPayload.#ctor">
            <summary>
            Create an AnswerPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.AnswerPayload.NotifyPropertyChanged(System.String)">
            <summary>
            Notify changes on given property
            </summary>
            <param name="propertyName">Property's name</param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.Id">
            <summary>
            Answer id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.IsChecked">
            <summary>
            Check status
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.Value">
            <summary>
            Answer value
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.GroupName">
            <summary>
            Answer group name
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReachPayload.AnswerPayload.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.BehaviorPayload">
            <summary>
            BehaviorPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.BehaviorPayload.#ctor">
            <summary>
            Create a BehaviorPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.BehaviorPayload.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.BehaviorPayload.Activities">
            <summary>
            Activities
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.DataTypePayload">
            <summary>
            Format of a payload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ExitPayload">
            <summary>
            ExitPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ExitPayload.DEFAULT_LABEL">
            <summary>
            Default value for the exit payload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ExitPayload.#ctor">
            <summary>
            Create an ExitPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExitPayload.Label">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ExpiryPayload">
            <summary>
            ExpiryPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ExpiryPayload.NO_EXPIRY">
            <summary>
            No expiry constant
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ExpiryPayload.#ctor">
            <summary>
            Create an expiry payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExpiryPayload.IsLocalTimeZone">
            <summary>
            Indicate if it is in a local time zone
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExpiryPayload.Date">
            <summary>
            Expiry date
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.NotificationPayload">
            <summary>
            NotificationPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.NotificationPayload.#ctor">
            <summary>
            Create a notification payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.IsCloseable">
            <summary>
            Indicate if it is closeable 
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.HasIcon">
            <summary>
            Indicate if it has an icon
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.HasTickerIcon">
            <summary>
            Indicate if it has a ticker icon
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Title">
            <summary>
            Notification title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Message">
            <summary>
            Notification message
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Image">
            <summary>
            Notification image
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.QuestionPayload">
            <summary>
            QuestionPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.QuestionPayload.#ctor">
            <summary>
            Create a QuestionPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Id">
            <summary>
            Question id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Title">
            <summary>
            Question title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Answers">
            <summary>
            Answers
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachInteractivePayload.#ctor">
            <summary>
            Create a CapptainReachInteractivePayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Notification">
            <summary>
            Notification
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Exit">
            <summary>
            Exit
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Behavior">
            <summary>
            Behavior
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPagePayload.#ctor">
            <summary>
            Create a CapptainReachPagePayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPagePayload.GetReachType">
            <summary>
            Indicate the type of the reach payload.
            </summary>
            <returns>
            The string representation of the reach type.
            </returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPagePayload.Title">
            <summary>
            Page title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPagePayload.Body">
            <summary>
            Page body
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachAnnouncement.#ctor">
            <summary>
            Create a CapptainReachAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachAnnouncement.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns>CapptainReachKind</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachAnnouncement.Type">
            <summary>
            announcement type
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainTickle">
            <summary>
            The CapptainTickle is a class that wraps a tickle push from the Capptain back-end.
            It's only purpose is to find whether or not the app can refresh its message list
            when receiving a raw push from the microsoft push.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainTickle.#ctor">
            <summary>
            Create a CapptainTickle
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainTickle.AppId">
            <summary>
            Application id
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachDatapush">
            <summary>
            CapptainReachDataPush
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachDatapush.#ctor">
            <summary>
            Create a CapptainReachDataPush
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachDatapush.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns>CapptainReachKind</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachDatapush.Type">
            <summary>
            Datapush type
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachDatapush.Body">
            <summary>
            Datapush body
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachNotificationAnnouncement">
            <summary>
            CapptainReachNotificationAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachNotificationAnnouncement.#ctor">
            <summary>
            Create an empty CapptainReachNotificationAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachNotificationAnnouncement.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPoll">
            <summary>
            CapptainReachPoll payload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPoll.#ctor">
            <summary>
            Create a CapptainReachPoll
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPoll.GetReachType">
            <summary>
            Return the payload type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPoll.Questions">
            <summary>
            Questions
            </summary>
        </member>
        <member name="T:Capptain.Reach.AbstractContentState">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="T:Capptain.Reach.AbstractStopableState">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="T:Capptain.Reach.InteractiveContentDefaultState">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method executes a long job within the current state. It is the 'do' action in UML state machine.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnExit(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This is the last methode executed after other state and transition logic.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnAppSuspended(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The application is suspended.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnAppResumption(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The application is resuming.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnEndSession(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current session is ending.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnProcessPendingMessages(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There are new messages from backend, the state machine have to process them.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnProcessLaunchingMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            A launching message has resumed the application, process it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnHasMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There is one notification to display.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnStartActivity(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            An activity is starting.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnReachMessageException(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This exception occurs when something goes wrong in the message processing.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnNotificationDisplayed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification is displayed, the user can interact with it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnNotificationActioned(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification has been actioned by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnNotificationDismissed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification has been dismissed by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnContentDisplayed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current content is displayed, the user can interact with it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnContentActioned(Capptain.Reach.AbstractInteractiveContentStateMachine,System.String)">
            <summary>
            The current content has been actioned by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
            <param name="body">A feedback body.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnContentDismissed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current content has been dismissed by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnNotificationRemoved(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification has been removed.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.InteractiveContentDefaultState.OnContentRemoved(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current content has been removed.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractStopableState.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractContentState.OnProcessLaunchingMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There are new messages from backend, the state machine have to process them.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.AbstractNotificationState">
            <summary>
            This state regroups every transition upon working notifications.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractNotificationState.OnProcessLaunchingMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There is a launching message to process, the state machine have to handle it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractNotificationState.OnStartActivity(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            An activity is starting.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractNotificationState.OnEndSession(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current session is ending.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.DisplayingContent">
            <summary>
            Send a request to the UI logic to display the current content view.
            </summary>
        </member>
        <member name="M:Capptain.Reach.DisplayingContent.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:Capptain.Reach.DisplayingContent.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method executes a long job within the current state. It is the 'do' action in UML state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.DisplayingContent.OnContentDisplayed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current content is displayed, the user can interact with it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.DisplayingNotification">
            <summary>
            Send a request to the UI logic to display the current notification view.
            </summary>
        </member>
        <member name="M:Capptain.Reach.DisplayingNotification.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method executes a long job within the current state. It is the 'do' action in UML state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.DisplayingNotification.OnNotificationDisplayed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification is displayed, the user can interact with it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.DisplayingNotification.OnReachMessageException(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This exception occurs when something goes wrong in the message processing.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.AbstractInteractiveContentStateMachine">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="F:Capptain.Reach.AbstractInteractiveContentStateMachine.mCommandWorker">
            <summary>
            Manage command spool. The state machine starts the worker when it is ready.
            </summary>
        </member>
        <member name="F:Capptain.Reach.AbstractInteractiveContentStateMachine.mAppLifecycle">
            <summary>
            Manage command spool. The state machine starts the worker when it is ready.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.#ctor(Capptain.Reach.MessageSpool,Capptain.Agent.CommandWorker)">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Reach.AbstractInteractiveContentStateMachine"/> class.
            </summary>
            <param name="messageSpool">A storage dedicated to Capptain messages.</param>
            <param name="commandWorker">The worker wich executes reach commands.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.#ctor(Capptain.Reach.CapptainReachContent,Capptain.Reach.InteractiveContentDefaultState)">
            <summary>
            This constructor is only used for serialisation purpose.
            </summary>
            <param name="content">The content to serialize.</param>
            <param name="contentState">The state of the content to serialize.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.Start(System.Boolean,Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            Start the state machine. It wait for UI, watch for a launching message then proceed the first message if any.
            </summary>
            <param name="savedStateMachine">The saved state machine.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.Stop">
            <summary>
            Stop the state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.ChangeState(Capptain.Reach.InteractiveContentDefaultState)">
            <summary>
            Update current state with next state. 
            </summary>
            <param name="nextContentState"> The next state of the state machine. </param>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnAppSuspended">
            <summary>
            Called when the application is suspended.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnAppResumption">
            <summary>
            Called when application is resuming.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnEndSession">
            <summary>
            Handler for session ending.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnProcessPendingMessages">
            <summary>
            There are new messages from backend, the state machine have to process them.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnProcessLaunchingMessage(System.Int32)">
            <summary>
            A message has resumed the application, process this message now.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnHasMessage">
            <summary>
            There is one notification to display.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnStartActivity">
            <summary>
            Handler for activity startup.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnReachMessageException">
            <summary>
            This exception occurs when something goes wrong in the payload processing.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnNotificationDisplayed">
            <summary>
            The current notification is displayed, the user can interact with it.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnNotificationActioned">
            <summary>
            The current notification has been actioned by the user.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnNotificationDismissed">
            <summary>
            The current notification has been dismissed by the user.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnContentDisplayed">
            <summary>
            The current content is displayed, the user can interact with it.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnContentActioned(System.String)">
            <summary>
            The current content has been actioned by the user.
            </summary>
            <param name="body">A feedback body.</param>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnContentDismissed">
            <summary>
            The current content has been dismissed by the user.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnNotificationRemoved">
            <summary>
            The current notification has been removed.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.OnContentRemoved">
            <summary>
            The current content has been removed.
            </summary>
        </member>
        <member name="M:Capptain.Reach.AbstractInteractiveContentStateMachine.PostToastMessageProcess(System.Int32)">
            <summary>
            Prepare this toast message to be handled by the current state.
            </summary>
            <param name="toastMessageId">The capptain message ID coming with that toast message.</param>
            <returns>
            true if this toast message can be forwarded to the current state, false otherwise.
            </returns>
        </member>
        <member name="F:Capptain.Reach.AbstractInteractiveContentStateMachine.CurrentContentState">
            <summary>
            The current state of the state machine.
            </summary>
        </member>
        <member name="F:Capptain.Reach.AbstractInteractiveContentStateMachine.CurrentContent">
            <summary>
            The current message.
            </summary>
        </member>
        <member name="P:Capptain.Reach.AbstractInteractiveContentStateMachine.MessageSpool">
            <summary>
            The spool of messages.
            </summary>
        </member>
        <member name="F:Capptain.Reach.MessageSpool.mListLock">
            <summary>
            A global list locker on the content manager for the critical sections.
            </summary>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.Remove(Capptain.Reach.CapptainMessage)">
            <summary>
            Remove a message from the content manager.
            </summary>
            <param name="message">The message to delete</param>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.saveMessages">
            <summary>
            Explicitly persists the message list. The is used to save updated messages. 
            </summary>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.Add(System.Collections.Generic.List{Capptain.Reach.CapptainMessage})">
            <summary>
            Add a list of new messages to the content manager.
            </summary>
            <param name="messages">The new messages</param>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.Scan">
            <summary>
            Look for an eligible message (the message with highest priority) and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.CopyMessages">
            <summary>
            Create a copy of the logs awaiting in the spool.
            </summary>
            <returns>Logs copy</returns>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.Contains(System.Int32)">
            <summary>
            Tell wether the list contains the element with the given id or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.MessageSpool.SetFirst(Capptain.Reach.CapptainMessage)">
            <summary>
            Move or add an existing message to the first place in the list if it's not already the case.
            </summary>
            <param name="message">The Capptain message to set.</param>
        </member>
        <member name="P:Capptain.Reach.MessageSpool.Messages">
            <summary>
            Get or Set the Message list
            </summary>
        </member>
        <member name="T:Capptain.Reach.RemovingNotification">
            <summary>
            Removing the push notification from the view to prepare displaying the push content.
            </summary>
        </member>
        <member name="M:Capptain.Reach.RemovingNotification.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.RemovingNotification.OnNotificationRemoved(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The notification is removed
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="T:Capptain.Reach.TerminatingContent">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="M:Capptain.Reach.TerminatingContent.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method executes a long job within the current state. It is the 'do' action in UML state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.TerminatingContent.OnContentRemoved(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The content is removed
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="T:Capptain.Reach.TerminatingNotification">
            <summary>
            Terminate this notification by waiting for the notification to be removed from the view then resume the state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.TerminatingNotification.OnProcess(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method executes a long job within the current state. It is the 'do' action in UML state machine.
            </summary>
        </member>
        <member name="M:Capptain.Reach.TerminatingNotification.OnNotificationRemoved(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The notification is removed
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="T:Capptain.Reach.WaitingContentInteraction">
            <summary>
            Wait for user input (Action or Dismiss) on the Content.
            </summary>
        </member>
        <member name="M:Capptain.Reach.WaitingContentInteraction.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
        </member>
        <member name="M:Capptain.Reach.WaitingContentInteraction.OnContentActioned(Capptain.Reach.AbstractInteractiveContentStateMachine,System.String)">
            <summary>
            The current content has been actioned by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
            <param name="body">A feedback body.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingContentInteraction.OnContentDismissed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current content has been dismissed by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingContentInteraction.OnStartActivity(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            An activity is starting.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.WaitingNextMessage">
            <summary>
            Check for one eligible message from the message list for processing.
            </summary>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnHasMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There is one notification to display.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnProcessPendingMessages(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            There are new messages from backend, the state machine have to process them.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnProcessLaunchingMessage(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            A launching message has resumed the application, process it.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnStartActivity(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            An activity is starting.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnEndSession(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current session is ending.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNextMessage.OnReachMessageException(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This exception occurs when something goes wrong in the message processing.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.WaitingNotificationInteraction">
            <summary>
            Wait for user input (Action or Dismiss) on the Notification.
            </summary>
        </member>
        <member name="M:Capptain.Reach.WaitingNotificationInteraction.OnEntry(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            This method is executed upon entry to a state.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNotificationInteraction.OnNotificationActioned(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification has been actioned by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="M:Capptain.Reach.WaitingNotificationInteraction.OnNotificationDismissed(Capptain.Reach.AbstractInteractiveContentStateMachine)">
            <summary>
            The current notification has been dismissed by the user.
            </summary>
            <param name="stateMachine">The State machine that manage interactive content states.</param>
        </member>
        <member name="T:Capptain.Reach.ICapptainReachPage">
            <summary>
            The implementation (CapptainReachPage) needs a generic. We cannot use the equality
            check with the implementation when testing if a page is a content of a push.
            This is why we have this interface (for the moment).
            </summary>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.ShowNotification(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create and show a notification for the current page.
            If an exception is catched during the creation, we throw it and let the
            caller handles it.
            </summary>
            <returns>The notification view</returns>
            <exception cref="T:System.Exception">If an error occurred during the execution</exception>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.ShowContent(Capptain.Reach.CapptainReachContent)">
            <summary>
            Show the content of a message to the user (poll and announcement).
            </summary>
            <param name="content">A Capptain reach content to show.</param>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.RemoveNotification">
            <summary>
            Remove a Capptain notification from the current view.
            </summary>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.RemoveContent">
            <summary>
            Remove a Capptain content from the current view.
            </summary>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.TryNavigateTo(System.String)">
            <summary>
            Try to navigate to the given URI if the uri is valid
            </summary>
            <param name="uri">Uri of the page</param>
        </member>
        <member name="M:Capptain.Reach.ICapptainUI.WaitForUI(System.Action)">
            <summary>
            Wait for the UI until a page is created.
            Then, invoke a callback. 
            </summary>
            <param name="callback">The result callback to be run on UI</param>
        </member>
        <member name="T:Capptain.Reach.IChannel">
            <summary>
            The Channel object is the link between MPNS and the SDK.
            It establishes the channel, set the uri and the toast.
            </summary>
        </member>
        <member name="M:Capptain.Reach.IChannel.Bind">
            <summary>
            Initialize the HttpNotificationChannel.
            Find the channel, create it if needed and attach handlers.
            </summary>
        </member>
        <member name="M:Capptain.Reach.IChannel.Unbind">
            <summary>
            Unbind the channel
            </summary>
        </member>
        <member name="T:Capptain.Reach.PushService">
            <summary>
            The push service handles the transaction between the capptain backend and the SDK.
            It's a low level object that doesn't do any processing.
            </summary>
        </member>
        <member name="F:Capptain.Reach.PushService.mPushServiceState">
            <summary>
            The push service state is the current state of the service in the push service life cycle.
            This is an atomic type, no need for locking this but we need to tag it has volatile 
            to bypass some none thread safe compiler optimisation.
            </summary>
        </member>
        <member name="F:Capptain.Reach.PushService.mLifeCycleLock">
            <summary>
            This monitor takes care of the push service life cycle.
            </summary>
        </member>
        <member name="M:Capptain.Reach.PushService.Reset">
            <summary>
            Re-initialize the push service life cycle.
            </summary>
        </member>
        <member name="M:Capptain.Reach.PushService.OnPropertyChanged(System.String)">
            <summary>
            Create the property changed method to raise the event.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:Capptain.Reach.PushService.PushServiceState">
            <summary>
            Thread safe property on the current push service state.
            </summary>
        </member>
        <member name="E:Capptain.Reach.PushService.MessagesApiResponded">
            <summary>
            Event invoked when the messages API has responded to a request.
            Provides an event args containing the response code and the result (if any).
            </summary>
        </member>
        <member name="E:Capptain.Reach.PushService.PropertyChanged">
            <summary>
            Event invoked when a property change in the push service.
            </summary>
        </member>
        <member name="T:Capptain.Reach.PushService.PushServiceLifeCycle">
            <summary>
            Push service life cycle:
            
            INIT         : The push service is started but no get message performed yet.
              |
            GET_MESSAGE  : The get message request has been made waiting for an answer.
              |
            DONE         : All push messages from backend have been made.
            
            </summary>
        </member>
        <member name="T:Capptain.Reach.PushService.PushServiceProperties">
            <summary>
            The list of available properties to subscribe for property change event.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachFeedback">
            <summary>
            CapptainReachFeedback
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.DROPPED">
            <summary>
            Dropped
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_DISPLAYED">
            <summary>
            In app notification displayed
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.SYSTEM_NOTIFICATION_DISPLAYED">
            <summary>
            System notification displayed
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_ACTIONED">
            <summary>
            In app notification actioned
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.SYSTEM_NOTIFICATION_ACTIONED">
            <summary>
            In app notification actioned
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_EXITED">
            <summary>
            In app notification exited
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_DISPLAYED">
            <summary>
            Content displayed
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_ACTIONED">
            <summary>
            Content actioned
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_EXITED">
            <summary>
            Content exited
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachKind">
             <summary>
             Ugly, but hey, c# doesn't support string enum as Java does.
             Yep, probably one of the only things that Java does better than c#. :)
            
             It could be nice to create an enum with a System.ComponentModel.DescriptionAttribute
             and using reflection to get the value. One day.
             But for the moment, it's good enough.
            
             See : 
             - http://blog.spontaneouspublicity.com/associating-strings-with-enums-in-c
             - http://stackoverflow.com/questions/424366/c-sharp-string-enums
             </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.NOTIFICATION_ANNOUNCEMENT">
            <summary>
            Notification announcement type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.ANNOUNCEMENT">
            <summary>
            announcement type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.POLL">
            <summary>
            Poll type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.DATAPUSH">
            <summary>
            Datapush type
            </summary>
        </member>
        <member name="T:Capptain.Reach.SizedList`1">
            <summary>
            The sized list is a concurrent list with a limited capacity of item.
            <remarks>The ctor of this class is not thread safe, other methods are.</remarks>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Capptain.Reach.SizedList`1.mList">
            <summary>
            The shared list.
            </summary>
        </member>
        <member name="F:Capptain.Reach.SizedList`1.mListLock">
            <summary>
            A global locker on the shared queue for the critical sections.
            </summary>
        </member>
        <member name="M:Capptain.Reach.SizedList`1.#ctor(System.Int32)">
            <summary>
            Create a sized limited queue.
            <remarks>This ctor is not thread safe.</remarks>
            </summary>
            <param name="size">The definitive size of the queue.</param>
        </member>
        <member name="M:Capptain.Reach.SizedList`1.Add(`0)">
            <summary>
            Add an element to the list.
            <remarks>This method is thread safe.</remarks>
            </summary>
            <param name="item">The new messages</param>
        </member>
        <member name="M:Capptain.Reach.SizedList`1.Remove(`0)">
            <summary>
            Remove an item from the list.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Capptain.Reach.SizedList`1.Contains(`0)">
            <summary>
            Tell whether the list contains the element with the given item or not.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>Whether the list contains the given item or not.</returns>
        </member>
        <member name="T:Capptain.Reach.CapptainReachFeedbackEventArgs">
            <summary>
            Feedback event args
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachFeedbackEventArgs.#ctor">
            <summary>
            Create an empty CapptainReachFeedback event args
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachFeedbackEventArgs.#ctor(System.String)">
            <summary>
            Create a CapptainReachFeedback event args
            </summary>
            <param name="body"></param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachFeedbackEventArgs.Body">
            <summary>
            Body of the feedback
            </summary>
        </member>
        <member name="T:Capptain.Reach.MessagesApiEventArgs">
            <summary>
            Event args implementation
            </summary>
        </member>
        <member name="M:Capptain.Reach.MessagesApiEventArgs.HasSucceeded">
            <summary>
            Indicate if the API has returned correctly (with a OK status code).
            </summary>
            <returns>True if OK, false otherwise</returns>
        </member>
        <member name="M:Capptain.Reach.MessagesApiEventArgs.HasMessages">
            <summary>
            Indicate if there is some messages.
            </summary>
            <returns>True if it's the case, false otherwise.</returns>
        </member>
        <member name="P:Capptain.Reach.MessagesApiEventArgs.StatusCode">
            <summary>
            The http status code of the request. Could be null.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachMessageException">
            <summary>
            Exceptions on Capptain reach messages.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Reach.CapptainReachMessageException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Reach.CapptainReachMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Capptain.Reach.CapptainInvalidNotificationCreationException">
            <summary>
            CapptainInvalidNotificationCreationException
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainInvalidNotificationCreationException.#ctor(System.Exception)">
            <summary>
            Create a CapptainInvalidNotificationCreationException.
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Capptain.Reach.ReachFactory">
            <summary>
            The Capptain reach factory to create instances.
            </summary>
        </member>
        <member name="F:Capptain.Reach.ReachFactory.sFactory">
            <summary>
            Unique static instance.
            </summary>
        </member>
        <member name="F:Capptain.Reach.ReachFactory.mPushService">
            <summary>
            Unique instance of the push servcie.
            </summary>
        </member>
        <member name="F:Capptain.Reach.ReachFactory.mAppLifeCycle">
            <summary>
            Manage command spool. The state machine starts the worker when it is ready.
            </summary>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Capptain.Reach.ReachFactory"/> class. It must only be instanciated on the CapptainReach constructor. 
            </summary>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.CreatePushService">
            <summary>
            Create a Push service instance to manage communication with backend for push messges.
            </summary>
            <returns>
            Instance of the capptain UI.
            </returns>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.CreateCapptainUI">
            <summary>
            Create a capptain UI instance to interract with user interface.
            </summary>
            <returns>Instance of the capptain UI.</returns>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.CreatePushChannel">
            <summary>
            Create a push channel instance to manage platform channel.
            </summary>
            <returns>Instance of a push Channel.</returns>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.CreateStateMachine(Capptain.Reach.MessageSpool,Capptain.Agent.CommandWorker)">
            <summary>
            Create an state machine to manage interacive content.
            </summary>
            <returns>
            Instance of an interactive content state machine.
            </returns>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.CreateApplicationLifecycleManager">
            <summary>
            Return an IApplicationLifecycleManager implementation.
            </summary>
            <returns>IApplicationLifecycleManager implementation</returns>
        </member>
        <member name="M:Capptain.Reach.ReachFactory.RunOnUI(System.Action)">
            <summary>
            Run an action on the UI thread.
            </summary>
            <param name="action">The action to be run on the UI thread.</param>
        </member>
        <member name="P:Capptain.Reach.ReachFactory.Instance">
            <summary>
            Get or Set the unique instance of the reach factory.
            </summary>
        </member>
    </members>
</doc>
